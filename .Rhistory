) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(text = label, floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -7) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
'<table class="table">',
'<tr><td colspan="2">', "Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse", " (", ddd$value, " / ", ddd$arrived, " en 1988)",
'</td></tr>',
'</table>')
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(text = label, floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -7) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, " / ", ddd$arrived, " en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(text = label, floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -7) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, ' restants', "/", ddd$arrived, "arrivés en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(text = label, floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -7) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
colourpicker:::colourPickerAddin()
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, ' restants', "/", ddd$arrived, " arrivés en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(
text = label, style = list("fontSize" = "1.2em", "color" = "#FCFCFC"),
floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -7) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
pop <- data %>% filter(year == 0) %>% select(Citizenship, pop) %>% arrange(desc(pop))
pop.sub <- pop %>% slice(c(1:16, 21, 25)) %>% select(Citizenship) %>% unlist(use.names = F)
dd <- data %>% filter(Citizenship %in% pop.sub)
order.region <- dd %>% group_by(region) %>% summarise(meanRegion = mean(pc)) %>% ungroup()
dd <- left_join(dd, order.region) %>% mutate(region = reorder(region, meanRegion)) %>% select(-meanRegion)
order.country <- dd %>% group_by(iso2c) %>% summarise(meanIso= mean(pc)) %>% ungroup()
dd <- left_join(dd, order.country) %>% mutate(iso2c = reorder(iso2c, meanIso)) %>% select(-meanIso)
g1 <- ggplot(data = dd, aes(x = year, y= pc, group = Citizenship, colour = continent)) +
geom_line(aes(size = pop)) + swi_theme() + scale_size_continuous(range = c(0.001, 2))
g1b <- g1 + geom_text(data = dd %>% filter(year == max(year)), aes(label = Citizenship), hjust = 1, vjust = 1, check_overlap = T, nudge_y = 0.01) +
scale_colour_manual(values = swi_rpal) + ylab("%") +
labs(title = "How many migrants leave Switzerland over time?",
subtitle = "For immigrants arrived in Switzerland in 1998, share by nationality who left the country by year of residence") +
theme(legend.position = "none")
# g1b + facet_wrap(~continent, ncol = 1)
# g1b + facet_wrap(~region, ncol = 2)
g1b + facet_wrap(~iso2c, ncol = 3)
unique(ddd$continent)
unique(dd$continent)
unique(dd$region)
dd
unique(ddd$region)
unique(dd$region)
unique(dd$continent)
cols <- structure(c('#4c6570', '#7e827a', '#beb298', '#b15953'),
names  = c("Europe", "Americas", "Asia", "Africa"))
cols
ddd$region
unique(ddd$region)
match(unique(ddd$region), names(colours))
unique(ddd$region)
as.character(unique(ddd$region))
match(unique(ddd$continent), names(colours))
match(as.character(unique(ddd$continent)), names(colours))
ddd$continent
names(colours)
colours
match(as.character(unique(ddd$continent)), names(cols))
cols
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
cols <- structure(c('#4c6570', '#7e827a', '#beb298', '#b15953'),
names  = c("Europe", "Americas", "Asia", "Africa"))
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
color <- cols[match(as.character(unique(ddd$continent)), names(cols))]
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, ' restants', "/", ddd$arrived, " arrivés en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), fillColor = color,
showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(
text = label, style = list("fontSize" = "1.2em", "color" = "#FCFCFC"),
floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -9) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
color
cols[match(as.character(unique(ddd$continent)), names(cols))]
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
cols <- structure(c('#4c6570', '#7e827a', '#beb298', '#b15953'),
names  = c("Europe", "Americas", "Asia", "Africa"))
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
color <- cols[match(as.character(unique(ddd$continent)), names(cols))] %>% uname()
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
cols <- structure(c('#4c6570', '#7e827a', '#beb298', '#b15953'),
names  = c("Europe", "Americas", "Asia", "Africa"))
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
color <- cols[match(as.character(unique(ddd$continent)), names(cols))] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, ' restants', "/", ddd$arrived, " arrivés en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), fillColor = color,
showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(
text = label, style = list("fontSize" = "1.2em", "color" = "#FCFCFC"),
floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -9) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
library(highcharter)
library(swiRcharts)
lang <- 'EN'
teaserifiy <- F
chart.height <- 220
bg.colour <-  "#f2f2f2"
y.max <- max(dd$pc)
cols <- structure(c('#4c6570', '#7e827a', '#beb298', '#b15953'),
names  = c("Europe", "Americas", "Asia", "Africa"))
ddd <- dd %>% filter(iso2c == "JP") %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
color <- cols[match(as.character(unique(ddd$continent)), names(cols))] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, ' restants', "/", ddd$arrived, " arrivés en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), fillColor = color, lineColor = color,
showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(
text = label, style = list("fontSize" = "1.2em", "color" = "#FCFCFC"),
floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -9) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
plotArea <- function(dd, iso) {
ddd <- dd %>% filter(iso2c == iso) %>%
mutate(arrived = value[year == 0])
# Get translation
label <- countryTranslation(as.character(ddd[1,'iso2c']), lang)[1,2] %>% unname()
color <- cols[match(as.character(unique(ddd$continent)), names(cols))] %>% unname()
# Après, year, "année", 80% de ces ressortissants ont quitté la Suisse (value/ 1998 value).
ddd$tp <- paste0(
"Après", " <b>", ddd$year, "</b>", ' années', ", <b>", round(ddd$pc, 1), "%</b>",
" de ces ressortissants ont quitté la Suisse.", "<br>",
" (", ddd$value, ' restants', "/", ddd$arrived, " arrivés en 1988)"
)
hchart(
ddd, "areaspline", hcaes(x = year, y = pc, group = iso2c, tp = tp)
) %>%
hc_add_theme(hc_theme_swi) %>%
hc_plotOptions(
series = list(marker = list(enabled = F), fillColor = color, lineColor = color,
showInLegend = F, lineWidth = 1, fillOpacity = 0.7)
) %>%
hc_chart(
backgroundColor = bg.colour, height = chart.height,
spacing = list(0,4,9,3), borderRadius = 4,
borderColor = "white", borderWidth = 1
) %>%
hc_xAxis(
useHTML =T, lineColor = "transparent", tickLength = 7,
labels = list(autoRotation = list(0),
padding = 1, style = list(fontSize = "0.8em", textOverflow = 'none'),
enabled = ifelse(teaserifiy == T, F, T)),
gridLineWidth = 0,  title = "", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_yAxis(
useHTML = T, labels = list(format = '{value}%', style = list(fontSize = "0.8em")),
gridLineWidth = 1, ceiling = y.max, tickInterval = 20,
minPadding = 0, maxPadding = 0, max = y.max,
title = "", opposite = ifelse(lang == "AR", T, F)
) %>%
hc_title(
text = label, style = list("fontSize" = "1.2em", "color" = "#FCFCFC"),
floating = T, align = "right", useHTML = T, y = chart.height - 50, x = -9) %>%
hc_tooltip(
hideDelay = 10, formatter = JS("function() { return this.point.tp; }"),
useHTML = T, borderWidth = 1,
backgroundColor = 'rgba(255,255,255,1)', style = list(padding = 3, fontSize = "0.7em"))
}
plotArea(dd, "JP")
ddd$iso2c
ddd$iso2c
dd$iso2c
levels(dd$iso2c)
plots <- lapply(levels(dd$iso2c), function(iso) plotArea(dd, iso))
hw_grid(plots, ncol = 3, rowheight = chart.height)
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
#tags$h2(HTML(txt['main.title', lang])),
#div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 3, rowheight = chart.height)),
# div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), #background = chart.area.bg,
file =  paste0("departureOverTime_", lang, ".html"), libdir = "js")
library(htmltools)
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
#tags$h2(HTML(txt['main.title', lang])),
#div(class = "descr", HTML(paste0('<img src="https://interactive.swissinfo.ch/assets/Interactive_icon.svg.png" width="12" align="top">&nbsp; ', txt['descr', lang]))),
#tags$h3(HTML(txt['h3', lang])),
div(class = "graphic", hw_grid(plots, ncol = 3, rowheight = chart.height)),
# div(id = "cite", HTML(source)),
# div(class = "footer", HTML(txt['footer', lang])),
HTML(iframeresizer)
), #background = chart.area.bg,
file =  paste0("departureOverTime_", lang, ".html"), libdir = "js")
